{
	"then": {
		"prefix": "then",
		"body": "then",
		"description": "then",
		"scope": "source.lua"
	},
	"do": {
		"prefix": "do",
		"body": "do",
		"description": "do",
		"scope": "source.lua"
	},
	"else": {
		"prefix": "else",
		"body": "else",
		"description": "else",
		"scope": "source.lua"
	},
	"end": {
		"prefix": "end",
		"body": "end",
		"description": "end",
		"scope": "source.lua"
	},
	"while": {
		"prefix": "while",
		"body": "while ${1:condition} do\n\t${0:-- body}\nend",
		"description": "while",
		"scope": "source.lua"
	},
	"if": {
		"prefix": "if",
		"body": "if ${1:condition} then\n\t${0:-- body}\nend",
		"description": "if",
		"scope": "source.lua"
	},
	"ifel": {
		"prefix": "ifel",
		"body": "if ${1:condition} then\n\t${2:-- body}\nelse\n\t${0:-- body}\nend",
		"description": "ifel",
		"scope": "source.lua"
	},
	"elif": {
		"prefix": "elif",
		"body": "else if ${1:condition} then\n\t${0:-- body}\n",
		"description": "elif",
		"scope": "source.lua"
	},
	"fori": {
		"prefix": "fori",
		"body": "for ${1:i},${2:v} in ipairs(${3:table_name}) do\n\t${0:print(i,v)}\nend",
		"description": "for i,v in ipairs()",
		"scope": "source.lua"
	},
	"for": {
		"prefix": "for",
		"body": "for ${1:i}=${2:1},${3:10} do\n\t${0:print(i)}\nend",
		"description": "for i=1,10",
		"scope": "source.lua"
	},
	"forp": {
		"prefix": "forp",
		"body": "for ${1:k},${2:v} in pairs(${3:table_name}) do\n\t${0:print(k,v)}\nend",
		"description": "for k,v in pairs()",
		"scope": "source.lua"
	},
	"fun": {
		"prefix": "fun",
		"body": "function ${1:function_name}( ${2:...} )\n\t${0:-- body}\nend",
		"description": "function",
		"scope": "source.lua"
	},
	"function": {
		"prefix": "function",
		"body": "function ${1:function_name}( ${2:...} )\n\t${0:-- body}\nend",
		"description": "function",
		"scope": "source.lua"
	},
	"local": {
		"prefix": "local",
		"body": "local ${1:x} = ${0:1}",
		"description": "local x = 1",
		"scope": "source.lua"
	},
	"ret": {
		"prefix": "ret",
		"body": "return ${1:...}",
		"description": "return ...",
		"scope": "source.lua"
	},
	"req": {
		"prefix": "req",
		"body": "require(\"${1:module}\")",
		"description": "require()",
		"scope": "source.lua"
	},
	"require": {
		"prefix": "require",
		"body": "require(\"${1:module}\")",
		"description": "require()",
		"scope": "source.lua"
	},
	"ver": {
		"prefix": "ver",
		"body": "_VERSION",
		"description": "_VERSION",
		"scope": "source.lua"
	},
	"version": {
		"prefix": "version",
		"body": "_VERSION",
		"description": "_VERSION",
		"scope": "source.lua"
	},
	"assert": {
		"prefix": "assert",
		"body": "assert(${1:v}${2:[, message]})",
		"description": "assert()",
		"scope": "source.lua"
	},
	"collectgarbage": {
		"prefix": "collectgarbage",
		"body": "collectgarbage(${1:[opt]}${2:[, arg]})",
		"description": "collectgarbage()",
		"scope": "source.lua"
	},
	"dofile": {
		"prefix": "dofile",
		"body": "dofile(${1:[filename]})",
		"description": "dofile ([filename])",
		"scope": "source.lua"
	},
	"getmetatable": {
		"prefix": "getmetatable",
		"body": "getmetatable(${1:object})",
		"description": "getmetatable (object)",
		"scope": "source.lua"
	},
	"next": {
		"prefix": "next",
		"body": "next(${1:table}${2:[, index]})",
		"description": "next (table [, index])",
		"scope": "source.lua"
	},
	"print": {
		"prefix": "print",
		"body": "print(${1:...})",
		"description": "print(...)",
		"scope": "source.lua"
	},
	"select": {
		"prefix": "select",
		"body": "select(${1:index}, ${2:...})",
		"description": "select (index, ···)",
		"scope": "source.lua"
	},
	"setmetatable": {
		"prefix": "setmetatable",
		"body": "setmetatable(${1:table}, ${2:metatable})",
		"description": "setmetatable (table, metatable)",
		"scope": "source.lua"
	},
	"tonumber": {
		"prefix": "tonumber",
		"body": "tonumber(${1:e}${2:[, base]})",
		"description": "tonumber (e [, base])",
		"scope": "source.lua"
	},
	"tostring": {
		"prefix": "tostring",
		"body": "tostring(${1:v})",
		"description": "tostring (v)",
		"scope": "source.lua"
	},
	"type": {
		"prefix": "type",
		"body": "type(${1:v})",
		"description": "type (v)",
		"scope": "source.lua"
	},
	"table.concat": {
		"prefix": "table.concat",
		"body": "table.concat( ${1:tablename}${2:, \", \"}${3:, start_index}${4:, end_index} )",
		"description": "table.concat",
		"scope": "source.lua"
	},
	"table.insert": {
		"prefix": "table.insert",
		"body": "table.insert( ${1:list},${2: [pos,]}${3: value} )",
		"description": "table.insert",
		"scope": "source.lua"
	},
	"table.remove": {
		"prefix": "table.remove",
		"body": "table.remove( ${1:list},${2: [pos,]} )",
		"description": "table.remove",
		"scope": "source.lua"
	},
	"table.sort": {
		"prefix": "table.sort",
		"body": "table.sort( ${1:tablename}${2:, sortfunction} )",
		"description": "table.sort",
		"scope": "source.lua"
	},
	"string.byte": {
		"prefix": "string.byte",
		"body": "string.byte( ${1:s}${2:[, i]}${3:[, j]} )",
		"description": "string.byte",
		"scope": "source.lua"
	},
	"string.char": {
		"prefix": "string.char",
		"body": "string.char( ${1:...} )",
		"description": "string.char",
		"scope": "source.lua"
	},
	"string.find": {
		"prefix": "string.find",
		"body": "string.find( ${1:s},${2:pattern}${3:[, init]}${4:[, plain]} )",
		"description": "string.find",
		"scope": "source.lua"
	},
	"string.format": {
		"prefix": "string.format",
		"body": "string.format( \"${1:formatstring}\",${2:...} )",
		"description": "string.format",
		"scope": "source.lua"
	},
	"string.gmatch": {
		"prefix": "string.gmatch",
		"body": "string.gmatch( ${1:s},${2:pattern} )",
		"description": "string.gmatch",
		"scope": "source.lua"
	},
	"string.gsub": {
		"prefix": "string.gsub",
		"body": "string.gsub( ${1:s},${2:pattern},${3:repl}${4:[, n]} )",
		"description": "string.gsub",
		"scope": "source.lua"
	},
	"string.sub": {
		"prefix": "string.sub",
		"body": "string.sub( ${1:s}, ${2:i}${3:[, j]} )",
		"description": "string.sub",
		"scope": "source.lua"
	},
	"string.len": {
		"prefix": "string.len",
		"body": "string.len( ${1:s} )",
		"description": "string.len",
		"scope": "source.lua"
	},
	"string.lower": {
		"prefix": "string.lower",
		"body": "string.lower( ${1:s} )",
		"description": "string.lower",
		"scope": "source.lua"
	},
	"string.match": {
		"prefix": "string.match",
		"body": "string.match( ${1:s},${2:pattern}${3:[, init]} )",
		"description": "string.match",
		"scope": "source.lua"
	},
	"string.upper": {
		"prefix": "string.upper",
		"body": "string.upper( ${1:s} )",
		"description": "string.upper",
		"scope": "source.lua"
	},
	"string.rep": {
		"prefix": "string.rep",
		"body": "string.rep( ${1:s}, ${2:n}${3:[, rep]} )",
		"description": "string.rep",
		"scope": "source.lua"
	},
	"string.reverse": {
		"prefix": "string.reverse",
		"body": "string.reverse( ${1:s} )",
		"description": "string.reverse",
		"scope": "source.lua"
	},
	"math.abs": {
		"prefix": "math.abs",
		"body": "math.abs( ${1:x} )",
		"description": "math.abs",
		"scope": "source.lua"
	},
	"math.acos": {
		"prefix": "math.acos",
		"body": "math.acos( ${1:x} )",
		"description": "math.acos",
		"scope": "source.lua"
	},
	"math.asin": {
		"prefix": "math.asin",
		"body": "math.asin( ${1:x} )",
		"description": "math.asin",
		"scope": "source.lua"
	},
	"math.ceil": {
		"prefix": "math.ceil",
		"body": "math.ceil( ${1:x} )",
		"description": "math.ceil",
		"scope": "source.lua"
	},
	"math.cos": {
		"prefix": "math.cos",
		"body": "math.cos( ${1:x} )",
		"description": "math.cos",
		"scope": "source.lua"
	},
	"math.deg": {
		"prefix": "math.deg",
		"body": "math.deg( ${1:x} )",
		"description": "math.deg",
		"scope": "source.lua"
	},
	"math.exp": {
		"prefix": "math.exp",
		"body": "math.exp( ${1:x} )",
		"description": "math.exp",
		"scope": "source.lua"
	},
	"math.floor": {
		"prefix": "math.floor",
		"body": "math.floor( ${1:x} )",
		"description": "math.floor",
		"scope": "source.lua"
	},
	"math.modf": {
		"prefix": "math.modf",
		"body": "math.modf( ${1:x} )",
		"description": "math.modf",
		"scope": "source.lua"
	},
	"math.math.randomseed": {
		"prefix": "math.math.randomseed",
		"body": "math.math.randomseed( ${1:x} )",
		"description": "math.math.randomseed",
		"scope": "source.lua"
	},
	"math.sin": {
		"prefix": "math.sin",
		"body": "math.sin( ${1:x} )",
		"description": "math.sin",
		"scope": "source.lua"
	},
	"math.sqrt": {
		"prefix": "math.sqrt",
		"body": "math.sqrt( ${1:x} )",
		"description": "math.sqrt",
		"scope": "source.lua"
	},
	"math.tan": {
		"prefix": "math.tan",
		"body": "math.tan( ${1:x} )",
		"description": "math.tan",
		"scope": "source.lua"
	},
	"math.tointeger": {
		"prefix": "math.tointeger",
		"body": "math.tointeger( ${1:x} )",
		"description": "math.tointeger",
		"scope": "source.lua"
	},
	"math.type": {
		"prefix": "math.type",
		"body": "math.type( ${1:x} )",
		"description": "math.type",
		"scope": "source.lua"
	},
	"math.random": {
		"prefix": "math.random",
		"body": "math.random( ${1:[m]}${2:[, n]} )",
		"description": "math.random",
		"scope": "source.lua"
	},
	"math.log": {
		"prefix": "math.log",
		"body": "math.log( ${1:x}${2:[, base]} )",
		"description": "math.log",
		"scope": "source.lua"
	},
	"math.max": {
		"prefix": "math.max",
		"body": "math.max( ${1:x},${2:...} )",
		"description": "math.max",
		"scope": "source.lua"
	},
	"math.min": {
		"prefix": "math.min",
		"body": "math.min( ${1:x},${2:...} )",
		"description": "math.min",
		"scope": "source.lua"
	},
	"math.fmod": {
		"prefix": "math.fmod",
		"body": "math.fmod( ${1:x},${2:y} )",
		"description": "math.fmod",
		"scope": "source.lua"
	},
	"math.atan": {
		"prefix": "math.atan",
		"body": "math.atan( ${1:y}${2:[, x]} )",
		"description": "math.atan",
		"scope": "source.lua"
	},
	"coroutine.create": {
		"prefix": "coroutine.create",
		"body": "coroutine.create( ${1:function} )",
		"description": "coroutine.create",
		"scope": "source.lua"
	},
	"coroutine.isyieldable": {
		"prefix": "coroutine.isyieldable",
		"body": "coroutine.isyieldable( )",
		"description": "coroutine.isyieldable",
		"scope": "source.lua"
	},
	"coroutine.resume": {
		"prefix": "coroutine.resume",
		"body": "coroutine.resume( ${1:co}${2:[, val1, ···]} )",
		"description": "coroutine.resume",
		"scope": "source.lua"
	},
	"coroutine.running": {
		"prefix": "coroutine.running",
		"body": "coroutine.running( )",
		"description": "coroutine.running",
		"scope": "source.lua"
	},
	"coroutine.status": {
		"prefix": "coroutine.status",
		"body": "coroutine.status( ${1:co} )",
		"description": "coroutine.status",
		"scope": "source.lua"
	},
	"coroutine.wrap": {
		"prefix": "coroutine.wrap",
		"body": "coroutine.wrap( ${1:function} )",
		"description": "coroutine.wrap",
		"scope": "source.lua"
	},
	"coroutine.yield": {
		"prefix": "coroutine.yield",
		"body": "coroutine.yield( ${1:...} )",
		"description": "coroutine.yield",
		"scope": "source.lua"
	},
	"debug.debug": {
		"prefix": "debug.debug",
		"body": "debug.debug()",
		"description": "debug.debug ()",
		"scope": "source.lua"
	},
	"debug.gethook": {
		"prefix": "debug.gethook",
		"body": "debug.gethook( ${1:[thread]} )",
		"description": "debug.gethook ([thread])",
		"scope": "source.lua"
	},
	"debug.getlocal": {
		"prefix": "debug.getlocal",
		"body": "debug.getlocal( ${1:[thread],}${2:f}${3:[, local]} )",
		"description": "debug.getlocal ([thread,] f, local)",
		"scope": "source.lua"
	},
	"debug.getinfo": {
		"prefix": "debug.getinfo",
		"body": "debug.getinfo( ${1:[thread],}${2:f}${3:[, what]} )",
		"description": "debug.getinfo ([thread,] f [, what])",
		"scope": "source.lua"
	},
	"debug.getmetatable": {
		"prefix": "debug.getmetatable",
		"body": "debug.getmetatable( ${1:value} )",
		"description": "debug.getmetatable (value)",
		"scope": "source.lua"
	},
	"debug.getregistry": {
		"prefix": "debug.getregistry",
		"body": "debug.getregistry()",
		"description": "debug.getregistry ()",
		"scope": "source.lua"
	},
	"debug.getupvalue": {
		"prefix": "debug.getupvalue",
		"body": "debug.getupvalue( ${1:f}, ${2:up} )",
		"description": "debug.getupvalue (f, up)",
		"scope": "source.lua"
	},
	"debug.getuservalue ": {
		"prefix": "debug.getuservalue ",
		"body": "debug.getuservalue ( ${1:u} )",
		"description": "debug.getuservalue (u)",
		"scope": "source.lua"
	},
	"debug.sethook": {
		"prefix": "debug.sethook",
		"body": "debug.sethook( ${1:[thead,]}${2:hook}, ${3:mask}${4:[, count]} )",
		"description": "debug.sethook ([thread,] hook, mask [, count])",
		"scope": "source.lua"
	},
	"debug.setlocal": {
		"prefix": "debug.setlocal",
		"body": "debug.setlocal( ${1:[thead,]}${2:level}, ${3:local}, ${4:value} )",
		"description": "debug.setlocal ([thread,] level, local, value)",
		"scope": "source.lua"
	},
	"debug.setmetatable": {
		"prefix": "debug.setmetatable",
		"body": "debug.setmetatable( ${1:value}, ${2:table} )",
		"description": "debug.setmetatable (value, table)",
		"scope": "source.lua"
	},
	"debug.setupvalue": {
		"prefix": "debug.setupvalue",
		"body": "debug.setupvalue( ${1:f}, ${2:up}, ${3:value} )",
		"description": "debug.setupvalue (f, up, value)",
		"scope": "source.lua"
	},
	"debug.setuservalue": {
		"prefix": "debug.setuservalue",
		"body": "debug.setuservalue( ${1:udata}, ${2:value} )",
		"description": "debug.setuservalue (udata, value)",
		"scope": "source.lua"
	},
	"debug.traceback": {
		"prefix": "debug.traceback",
		"body": "debug.traceback( ${1:[thread,]}${2:[message]}${3:[, level]} )",
		"description": "debug.traceback ([thread,] [message [, level]])",
		"scope": "source.lua"
	},
	"debug.upvalueid": {
		"prefix": "debug.upvalueid",
		"body": "debug.upvalueid( ${1:f}, ${2:n})",
		"description": "debug.upvalueid (f, n)",
		"scope": "source.lua"
	},
	"debug.upvaluejoin": {
		"prefix": "debug.upvaluejoin",
		"body": "debug.upvaluejoin( ${1:f1}, ${2:n1}, ${3:f2}, ${4:n2} )",
		"description": "debug.upvaluejoin (f1, n1, f2, n2)",
		"scope": "source.lua"
	},
	"VK.NONE": {
		"prefix": "VK.NONE",
		"body": "VK.NONE",
		"description": "VK Enum - This Enum value Means no key.",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.LBUTTON": {
		"prefix": "VK.LBUTTON",
		"body": "VK.LBUTTON",
		"description": "VK Enum - Left mouse button",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.RBUTTON": {
		"prefix": "VK.RBUTTON",
		"body": "VK.RBUTTON",
		"description": "VK Enum - Right mouse button",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.CANCEL": {
		"prefix": "VK.CANCEL",
		"body": "VK.CANCEL",
		"description": "VK Enum - Control-break processing",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.MBUTTON": {
		"prefix": "VK.MBUTTON",
		"body": "VK.MBUTTON",
		"description": "VK Enum - Middle mouse button (three-button mouse)",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.XBUTTON1M": {
		"prefix": "VK.XBUTTON1M",
		"body": "VK.XBUTTON1M",
		"description": "VK Enum - Windows 2000/XP: X1 mouse button",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.XBUTTON2M": {
		"prefix": "VK.XBUTTON2M",
		"body": "VK.XBUTTON2M",
		"description": "VK Enum - Windows 2000/XP: X2 mouse button",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.BACK": {
		"prefix": "VK.BACK",
		"body": "VK.BACK",
		"description": "VK Enum - BACKSPACE key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.TAB": {
		"prefix": "VK.TAB",
		"body": "VK.TAB",
		"description": "VK Enum - TAB key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.CLEAR": {
		"prefix": "VK.CLEAR",
		"body": "VK.CLEAR",
		"description": "VK Enum - CLEAR key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.RETURN": {
		"prefix": "VK.RETURN",
		"body": "VK.RETURN",
		"description": "VK Enum - ENTER key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.SHIFT": {
		"prefix": "VK.SHIFT",
		"body": "VK.SHIFT",
		"description": "VK Enum - SHIFT key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.CONTROL": {
		"prefix": "VK.CONTROL",
		"body": "VK.CONTROL",
		"description": "VK Enum - CTRL key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.MENU": {
		"prefix": "VK.MENU",
		"body": "VK.MENU",
		"description": "VK Enum - ALT key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.PAUSE": {
		"prefix": "VK.PAUSE",
		"body": "VK.PAUSE",
		"description": "VK Enum - PAUSE key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.CAPITAL": {
		"prefix": "VK.CAPITAL",
		"body": "VK.CAPITAL",
		"description": "VK Enum - CAPS LOCK key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.KANA": {
		"prefix": "VK.KANA",
		"body": "VK.KANA",
		"description": "VK Enum - Input Method Editor (IME) Kana mode",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.HANGUL": {
		"prefix": "VK.HANGUL",
		"body": "VK.HANGUL",
		"description": "VK Enum - IME Hangul mode",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.JUNJA": {
		"prefix": "VK.JUNJA",
		"body": "VK.JUNJA",
		"description": "VK Enum - IME Junja mode",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.FINAL": {
		"prefix": "VK.FINAL",
		"body": "VK.FINAL",
		"description": "VK Enum - IME final mode",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.HANJA": {
		"prefix": "VK.HANJA",
		"body": "VK.HANJA",
		"description": "VK Enum - IME Hanja mode",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.KANJI": {
		"prefix": "VK.KANJI",
		"body": "VK.KANJI",
		"description": "VK Enum - IME Kanji mode",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.ESCAPE": {
		"prefix": "VK.ESCAPE",
		"body": "VK.ESCAPE",
		"description": "VK Enum - ESC key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.CONVERT": {
		"prefix": "VK.CONVERT",
		"body": "VK.CONVERT",
		"description": "VK Enum - IME convert",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.NONCONVERT": {
		"prefix": "VK.NONCONVERT",
		"body": "VK.NONCONVERT",
		"description": "VK Enum - IME nonconvert",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.ACCEPT": {
		"prefix": "VK.ACCEPT",
		"body": "VK.ACCEPT",
		"description": "VK Enum - IME accept",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.MODECHANGE": {
		"prefix": "VK.MODECHANGE",
		"body": "VK.MODECHANGE",
		"description": "VK Enum - IME mode change request",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.SPACE": {
		"prefix": "VK.SPACE",
		"body": "VK.SPACE",
		"description": "VK Enum - SPACEBAR",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.PRIOR": {
		"prefix": "VK.PRIOR",
		"body": "VK.PRIOR",
		"description": "VK Enum - PAGE UP key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.NEXT": {
		"prefix": "VK.NEXT",
		"body": "VK.NEXT",
		"description": "VK Enum - PAGE DOWN key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.END": {
		"prefix": "VK.END",
		"body": "VK.END",
		"description": "VK Enum - END key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.HOME": {
		"prefix": "VK.HOME",
		"body": "VK.HOME",
		"description": "VK Enum - HOME key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.LEFT": {
		"prefix": "VK.LEFT",
		"body": "VK.LEFT",
		"description": "VK Enum - LEFT ARROW key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.UP": {
		"prefix": "VK.UP",
		"body": "VK.UP",
		"description": "VK Enum - UP ARROW key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.RIGHT": {
		"prefix": "VK.RIGHT",
		"body": "VK.RIGHT",
		"description": "VK Enum - RIGHT ARROW key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.DOWN": {
		"prefix": "VK.DOWN",
		"body": "VK.DOWN",
		"description": "VK Enum - DOWN ARROW key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.SELECT": {
		"prefix": "VK.SELECT",
		"body": "VK.SELECT",
		"description": "VK Enum - SELECT key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.PRINT": {
		"prefix": "VK.PRINT",
		"body": "VK.PRINT",
		"description": "VK Enum - PRINT key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.EXECUTE": {
		"prefix": "VK.EXECUTE",
		"body": "VK.EXECUTE",
		"description": "VK Enum - EXECUTE key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.SNAPSHOT": {
		"prefix": "VK.SNAPSHOT",
		"body": "VK.SNAPSHOT",
		"description": "VK Enum - PRINT SCREEN key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.INSERT": {
		"prefix": "VK.INSERT",
		"body": "VK.INSERT",
		"description": "VK Enum - INS key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.DEL": {
		"prefix": "VK.DEL",
		"body": "VK.DEL",
		"description": "VK Enum - DEL key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.HELP": {
		"prefix": "VK.HELP",
		"body": "VK.HELP",
		"description": "VK Enum - HELP key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.KEY_0": {
		"prefix": "VK.KEY_0",
		"body": "VK.KEY_0",
		"description": "VK Enum - 0 key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.KEY_1": {
		"prefix": "VK.KEY_1",
		"body": "VK.KEY_1",
		"description": "VK Enum - 1 key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.KEY_2": {
		"prefix": "VK.KEY_2",
		"body": "VK.KEY_2",
		"description": "VK Enum - 2 key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.KEY_3": {
		"prefix": "VK.KEY_3",
		"body": "VK.KEY_3",
		"description": "VK Enum - 3 key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.KEY_4": {
		"prefix": "VK.KEY_4",
		"body": "VK.KEY_4",
		"description": "VK Enum - 4 key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.KEY_5": {
		"prefix": "VK.KEY_5",
		"body": "VK.KEY_5",
		"description": "VK Enum - 5 key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.KEY_6": {
		"prefix": "VK.KEY_6",
		"body": "VK.KEY_6",
		"description": "VK Enum - 6 key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.KEY_7": {
		"prefix": "VK.KEY_7",
		"body": "VK.KEY_7",
		"description": "VK Enum - 7 key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.KEY_8": {
		"prefix": "VK.KEY_8",
		"body": "VK.KEY_8",
		"description": "VK Enum - 8 key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.KEY_9": {
		"prefix": "VK.KEY_9",
		"body": "VK.KEY_9",
		"description": "VK Enum - 9 key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.KEY_A": {
		"prefix": "VK.KEY_A",
		"body": "VK.KEY_A",
		"description": "VK Enum - A key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.KEY_B": {
		"prefix": "VK.KEY_B",
		"body": "VK.KEY_B",
		"description": "VK Enum - B key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.KEY_C": {
		"prefix": "VK.KEY_C",
		"body": "VK.KEY_C",
		"description": "VK Enum - C key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.KEY_D": {
		"prefix": "VK.KEY_D",
		"body": "VK.KEY_D",
		"description": "VK Enum - D key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.KEY_E": {
		"prefix": "VK.KEY_E",
		"body": "VK.KEY_E",
		"description": "VK Enum - E key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.KEY_F": {
		"prefix": "VK.KEY_F",
		"body": "VK.KEY_F",
		"description": "VK Enum - F key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.KEY_G": {
		"prefix": "VK.KEY_G",
		"body": "VK.KEY_G",
		"description": "VK Enum - G key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.KEY_H": {
		"prefix": "VK.KEY_H",
		"body": "VK.KEY_H",
		"description": "VK Enum - H key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.KEY_I": {
		"prefix": "VK.KEY_I",
		"body": "VK.KEY_I",
		"description": "VK Enum - I key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.KEY_J": {
		"prefix": "VK.KEY_J",
		"body": "VK.KEY_J",
		"description": "VK Enum - J key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.KEY_K": {
		"prefix": "VK.KEY_K",
		"body": "VK.KEY_K",
		"description": "VK Enum - K key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.KEY_L": {
		"prefix": "VK.KEY_L",
		"body": "VK.KEY_L",
		"description": "VK Enum - L key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.KEY_M": {
		"prefix": "VK.KEY_M",
		"body": "VK.KEY_M",
		"description": "VK Enum - M key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.KEY_N": {
		"prefix": "VK.KEY_N",
		"body": "VK.KEY_N",
		"description": "VK Enum - N key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.KEY_O": {
		"prefix": "VK.KEY_O",
		"body": "VK.KEY_O",
		"description": "VK Enum - O key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.KEY_P": {
		"prefix": "VK.KEY_P",
		"body": "VK.KEY_P",
		"description": "VK Enum - P key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.KEY_Q": {
		"prefix": "VK.KEY_Q",
		"body": "VK.KEY_Q",
		"description": "VK Enum - Q key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.KEY_R": {
		"prefix": "VK.KEY_R",
		"body": "VK.KEY_R",
		"description": "VK Enum - R key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.KEY_S": {
		"prefix": "VK.KEY_S",
		"body": "VK.KEY_S",
		"description": "VK Enum - S key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.KEY_T": {
		"prefix": "VK.KEY_T",
		"body": "VK.KEY_T",
		"description": "VK Enum - T key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.KEY_U": {
		"prefix": "VK.KEY_U",
		"body": "VK.KEY_U",
		"description": "VK Enum - U key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.KEY_V": {
		"prefix": "VK.KEY_V",
		"body": "VK.KEY_V",
		"description": "VK Enum - V key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.KEY_W": {
		"prefix": "VK.KEY_W",
		"body": "VK.KEY_W",
		"description": "VK Enum - W key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.KEY_X": {
		"prefix": "VK.KEY_X",
		"body": "VK.KEY_X",
		"description": "VK Enum - X key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.KEY_Y": {
		"prefix": "VK.KEY_Y",
		"body": "VK.KEY_Y",
		"description": "VK Enum - Y key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.KEY_Z": {
		"prefix": "VK.KEY_Z",
		"body": "VK.KEY_Z",
		"description": "VK Enum - Z key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.LWIN": {
		"prefix": "VK.LWIN",
		"body": "VK.LWIN",
		"description": "VK Enum - Left Windows key (Microsoft Natural keyboard)",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.RWIN": {
		"prefix": "VK.RWIN",
		"body": "VK.RWIN",
		"description": "VK Enum - Right Windows key (Natural keyboard)",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.APPS": {
		"prefix": "VK.APPS",
		"body": "VK.APPS",
		"description": "VK Enum - Applications key (Natural keyboard)",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.SLEEP": {
		"prefix": "VK.SLEEP",
		"body": "VK.SLEEP",
		"description": "VK Enum - Computer Sleep key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.NUMPAD0": {
		"prefix": "VK.NUMPAD0",
		"body": "VK.NUMPAD0",
		"description": "VK Enum - Numeric keypad 0 key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.NUMPAD1": {
		"prefix": "VK.NUMPAD1",
		"body": "VK.NUMPAD1",
		"description": "VK Enum - Numeric keypad 1 key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.NUMPAD2": {
		"prefix": "VK.NUMPAD2",
		"body": "VK.NUMPAD2",
		"description": "VK Enum - Numeric keypad 2 key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.NUMPAD3": {
		"prefix": "VK.NUMPAD3",
		"body": "VK.NUMPAD3",
		"description": "VK Enum - Numeric keypad 3 key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.NUMPAD4": {
		"prefix": "VK.NUMPAD4",
		"body": "VK.NUMPAD4",
		"description": "VK Enum - Numeric keypad 4 key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.NUMPAD5": {
		"prefix": "VK.NUMPAD5",
		"body": "VK.NUMPAD5",
		"description": "VK Enum - Numeric keypad 5 key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.NUMPAD6": {
		"prefix": "VK.NUMPAD6",
		"body": "VK.NUMPAD6",
		"description": "VK Enum - Numeric keypad 6 key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.NUMPAD7": {
		"prefix": "VK.NUMPAD7",
		"body": "VK.NUMPAD7",
		"description": "VK Enum - Numeric keypad 7 key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.NUMPAD8": {
		"prefix": "VK.NUMPAD8",
		"body": "VK.NUMPAD8",
		"description": "VK Enum - Numeric keypad 8 key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.NUMPAD9": {
		"prefix": "VK.NUMPAD9",
		"body": "VK.NUMPAD9",
		"description": "VK Enum - Numeric keypad 9 key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.MULTIPLY": {
		"prefix": "VK.MULTIPLY",
		"body": "VK.MULTIPLY",
		"description": "VK Enum - Multiply key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.ADD": {
		"prefix": "VK.ADD",
		"body": "VK.ADD",
		"description": "VK Enum - Add key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.SEPARATOR": {
		"prefix": "VK.SEPARATOR",
		"body": "VK.SEPARATOR",
		"description": "VK Enum - Separator key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.SUBTRACT": {
		"prefix": "VK.SUBTRACT",
		"body": "VK.SUBTRACT",
		"description": "VK Enum - Subtract key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.DECIMAL": {
		"prefix": "VK.DECIMAL",
		"body": "VK.DECIMAL",
		"description": "VK Enum - Decimal key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.DIVIDE": {
		"prefix": "VK.DIVIDE",
		"body": "VK.DIVIDE",
		"description": "VK Enum - Divide key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.F1": {
		"prefix": "VK.F1",
		"body": "VK.F1",
		"description": "VK Enum - F1 key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.F2": {
		"prefix": "VK.F2",
		"body": "VK.F2",
		"description": "VK Enum - F2 key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.F3": {
		"prefix": "VK.F3",
		"body": "VK.F3",
		"description": "VK Enum - F3 key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.F4": {
		"prefix": "VK.F4",
		"body": "VK.F4",
		"description": "VK Enum - F4 key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.F5": {
		"prefix": "VK.F5",
		"body": "VK.F5",
		"description": "VK Enum - F5 key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.F6": {
		"prefix": "VK.F6",
		"body": "VK.F6",
		"description": "VK Enum - F6 key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.F7": {
		"prefix": "VK.F7",
		"body": "VK.F7",
		"description": "VK Enum - F7 key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.F8": {
		"prefix": "VK.F8",
		"body": "VK.F8",
		"description": "VK Enum - F8 key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.F9": {
		"prefix": "VK.F9",
		"body": "VK.F9",
		"description": "VK Enum - F9 key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.F10": {
		"prefix": "VK.F10",
		"body": "VK.F10",
		"description": "VK Enum - F10 key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.F11": {
		"prefix": "VK.F11",
		"body": "VK.F11",
		"description": "VK Enum - F11 key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.F12": {
		"prefix": "VK.F12",
		"body": "VK.F12",
		"description": "VK Enum - F12 key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.F13": {
		"prefix": "VK.F13",
		"body": "VK.F13",
		"description": "VK Enum - F13 key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.F14": {
		"prefix": "VK.F14",
		"body": "VK.F14",
		"description": "VK Enum - F14 key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.F15": {
		"prefix": "VK.F15",
		"body": "VK.F15",
		"description": "VK Enum - F15 key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.F16": {
		"prefix": "VK.F16",
		"body": "VK.F16",
		"description": "VK Enum - F16 key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.F17": {
		"prefix": "VK.F17",
		"body": "VK.F17",
		"description": "VK Enum - F17 key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.F18": {
		"prefix": "VK.F18",
		"body": "VK.F18",
		"description": "VK Enum - F18 key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.F19": {
		"prefix": "VK.F19",
		"body": "VK.F19",
		"description": "VK Enum - F19 key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.F20": {
		"prefix": "VK.F20",
		"body": "VK.F20",
		"description": "VK Enum - F20 key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.F21": {
		"prefix": "VK.F21",
		"body": "VK.F21",
		"description": "VK Enum - F21 key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.F22": {
		"prefix": "VK.F22",
		"body": "VK.F22",
		"description": "VK Enum - F22 key, (PPC only) Key used to lock device.",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.F23": {
		"prefix": "VK.F23",
		"body": "VK.F23",
		"description": "VK Enum - F23 key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.F24": {
		"prefix": "VK.F24",
		"body": "VK.F24",
		"description": "VK Enum - F24 key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.NUMLOCK": {
		"prefix": "VK.NUMLOCK",
		"body": "VK.NUMLOCK",
		"description": "VK Enum - NUM LOCK key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.SCROLL": {
		"prefix": "VK.SCROLL",
		"body": "VK.SCROLL",
		"description": "VK Enum - SCROLL LOCK key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.LSHIFT": {
		"prefix": "VK.LSHIFT",
		"body": "VK.LSHIFT",
		"description": "VK Enum - Left SHIFT key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.RSHIFT": {
		"prefix": "VK.RSHIFT",
		"body": "VK.RSHIFT",
		"description": "VK Enum - Right SHIFT key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.LCONTROL": {
		"prefix": "VK.LCONTROL",
		"body": "VK.LCONTROL",
		"description": "VK Enum - Left CONTROL key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.RCONTROL": {
		"prefix": "VK.RCONTROL",
		"body": "VK.RCONTROL",
		"description": "VK Enum - Right CONTROL key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.LMENU": {
		"prefix": "VK.LMENU",
		"body": "VK.LMENU",
		"description": "VK Enum - Left MENU key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.RMENU": {
		"prefix": "VK.RMENU",
		"body": "VK.RMENU",
		"description": "VK Enum - Right MENU key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.BROWSER_BACK": {
		"prefix": "VK.BROWSER_BACK",
		"body": "VK.BROWSER_BACK",
		"description": "VK Enum - Windows 2000/XP: Browser Back key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.BROWSER_FORWARD": {
		"prefix": "VK.BROWSER_FORWARD",
		"body": "VK.BROWSER_FORWARD",
		"description": "VK Enum - Windows 2000/XP: Browser Forward key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.BROWSER_REFRESH": {
		"prefix": "VK.BROWSER_REFRESH",
		"body": "VK.BROWSER_REFRESH",
		"description": "VK Enum - Windows 2000/XP: Browser Refresh key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.BROWSER_STOP": {
		"prefix": "VK.BROWSER_STOP",
		"body": "VK.BROWSER_STOP",
		"description": "VK Enum - Windows 2000/XP: Browser Stop key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.BROWSER_SEARCH": {
		"prefix": "VK.BROWSER_SEARCH",
		"body": "VK.BROWSER_SEARCH",
		"description": "VK Enum - Windows 2000/XP: Browser Search key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.BROWSER_FAVORITES": {
		"prefix": "VK.BROWSER_FAVORITES",
		"body": "VK.BROWSER_FAVORITES",
		"description": "VK Enum - Windows 2000/XP: Browser Favorites key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.BROWSER_HOME": {
		"prefix": "VK.BROWSER_HOME",
		"body": "VK.BROWSER_HOME",
		"description": "VK Enum - Windows 2000/XP: Browser Start and Home key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.VOLUME_MUTE": {
		"prefix": "VK.VOLUME_MUTE",
		"body": "VK.VOLUME_MUTE",
		"description": "VK Enum - Windows 2000/XP: Volume Mute key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.VOLUME_DOWN": {
		"prefix": "VK.VOLUME_DOWN",
		"body": "VK.VOLUME_DOWN",
		"description": "VK Enum - Windows 2000/XP: Volume Down key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.VOLUME_UP": {
		"prefix": "VK.VOLUME_UP",
		"body": "VK.VOLUME_UP",
		"description": "VK Enum - Windows 2000/XP: Volume Up key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.MEDIA_NEXT_TRACK": {
		"prefix": "VK.MEDIA_NEXT_TRACK",
		"body": "VK.MEDIA_NEXT_TRACK",
		"description": "VK Enum - Windows 2000/XP: Next Track key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.MEDIA_PREV_TRACK": {
		"prefix": "VK.MEDIA_PREV_TRACK",
		"body": "VK.MEDIA_PREV_TRACK",
		"description": "VK Enum - Windows 2000/XP: Previous Track key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.MEDIA_STOP": {
		"prefix": "VK.MEDIA_STOP",
		"body": "VK.MEDIA_STOP",
		"description": "VK Enum - Windows 2000/XP: Stop Media key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.MEDIA_PLAY_PAUSE": {
		"prefix": "VK.MEDIA_PLAY_PAUSE",
		"body": "VK.MEDIA_PLAY_PAUSE",
		"description": "VK Enum - Windows 2000/XP: Play/Pause Media key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.LAUNCH_MAIL": {
		"prefix": "VK.LAUNCH_MAIL",
		"body": "VK.LAUNCH_MAIL",
		"description": "VK Enum - Windows 2000/XP: Start Mail key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.LAUNCH_MEDIA_SELECT": {
		"prefix": "VK.LAUNCH_MEDIA_SELECT",
		"body": "VK.LAUNCH_MEDIA_SELECT",
		"description": "VK Enum - Windows 2000/XP: Select Media key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.LAUNCH_APP1": {
		"prefix": "VK.LAUNCH_APP1",
		"body": "VK.LAUNCH_APP1",
		"description": "VK Enum - Windows 2000/XP: Start Application 1 key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.LAUNCH_APP2": {
		"prefix": "VK.LAUNCH_APP2",
		"body": "VK.LAUNCH_APP2",
		"description": "VK Enum - Windows 2000/XP: Start Application 2 key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.OEM_1": {
		"prefix": "VK.OEM_1",
		"body": "VK.OEM_1",
		"description": "VK Enum - Used for miscellaneous characters; it can vary by keyboard.",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.OEM_PLUS": {
		"prefix": "VK.OEM_PLUS",
		"body": "VK.OEM_PLUS",
		"description": "VK Enum - Windows 2000/XP: For any country/region, the '+' key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.OEM_COMMA": {
		"prefix": "VK.OEM_COMMA",
		"body": "VK.OEM_COMMA",
		"description": "VK Enum - Windows 2000/XP: For any country/region, the ',' key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.OEM_MINUS": {
		"prefix": "VK.OEM_MINUS",
		"body": "VK.OEM_MINUS",
		"description": "VK Enum - Windows 2000/XP: For any country/region, the '-' key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.OEM_PERIOD": {
		"prefix": "VK.OEM_PERIOD",
		"body": "VK.OEM_PERIOD",
		"description": "VK Enum - Windows 2000/XP: For any country/region, the '.' key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.OEM_2": {
		"prefix": "VK.OEM_2",
		"body": "VK.OEM_2",
		"description": "VK Enum - Used for miscellaneous characters; it can vary by keyboard.",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.OEM_3": {
		"prefix": "VK.OEM_3",
		"body": "VK.OEM_3",
		"description": "VK Enum - Used for miscellaneous characters; it can vary by keyboard.",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.OEM_4": {
		"prefix": "VK.OEM_4",
		"body": "VK.OEM_4",
		"description": "VK Enum - Used for miscellaneous characters; it can vary by keyboard.",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.OEM_5": {
		"prefix": "VK.OEM_5",
		"body": "VK.OEM_5",
		"description": "VK Enum - Used for miscellaneous characters; it can vary by keyboard.",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.OEM_6": {
		"prefix": "VK.OEM_6",
		"body": "VK.OEM_6",
		"description": "VK Enum - Used for miscellaneous characters; it can vary by keyboard.",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.OEM_7": {
		"prefix": "VK.OEM_7",
		"body": "VK.OEM_7",
		"description": "VK Enum - Used for miscellaneous characters; it can vary by keyboard.",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.OEM_8": {
		"prefix": "VK.OEM_8",
		"body": "VK.OEM_8",
		"description": "VK Enum - Used for miscellaneous characters; it can vary by keyboard.",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.OEM_102": {
		"prefix": "VK.OEM_102",
		"body": "VK.OEM_102",
		"description": "VK Enum - Windows 2000/XP: Either the angle bracket key or the backslash key on the RT 102-key keyboard",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.PROCESSKEY": {
		"prefix": "VK.PROCESSKEY",
		"body": "VK.PROCESSKEY",
		"description": "VK Enum - Windows 95/98/Me, Windows NT 4.0, Windows 2000/XP: IME PROCESS key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.PACKET": {
		"prefix": "VK.PACKET",
		"body": "VK.PACKET",
		"description": "VK Enum - Windows 2000/XP: Used to pass Unicode characters as if they were keystrokes. The VK_PACKET key is the low word of a 32-bit Virtual Key value used for non-keyboard input methods. For more information, see Remark in KEYBDINPUT, SendInput, WM_KEYDOWN, and WM_KEYUP",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.ATTN": {
		"prefix": "VK.ATTN",
		"body": "VK.ATTN",
		"description": "VK Enum - Attn key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.CRSEL": {
		"prefix": "VK.CRSEL",
		"body": "VK.CRSEL",
		"description": "VK Enum - CrSel key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.EXSEL": {
		"prefix": "VK.EXSEL",
		"body": "VK.EXSEL",
		"description": "VK Enum - ExSel key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.EREOF": {
		"prefix": "VK.EREOF",
		"body": "VK.EREOF",
		"description": "VK Enum - Erase EOF key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.PLAY": {
		"prefix": "VK.PLAY",
		"body": "VK.PLAY",
		"description": "VK Enum - Play key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.ZOOM": {
		"prefix": "VK.ZOOM",
		"body": "VK.ZOOM",
		"description": "VK Enum - Zoom key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.NONAME": {
		"prefix": "VK.NONAME",
		"body": "VK.NONAME",
		"description": "VK Enum - Reserved",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.PA1": {
		"prefix": "VK.PA1",
		"body": "VK.PA1",
		"description": "VK Enum - PA1 key",
		"scope": "hoodiescript-keys.lua"
	},
	"VK.OEM_CLEAR": {
		"prefix": "VK.OEM_CLEAR",
		"body": "VK.OEM_CLEAR",
		"description": "VK Enum - Clear key",
		"scope": "hoodiescript-keys.lua"
	},
	"WorldChrMan.getCurrentMapEnemies": {
		"prefix": "WorldChrMan.getCurrentMapEnemies",
		"body": "WorldChrMan.getCurrentMapEnemies()",
		"description": "WorldChrMan.getCurrentMapEnemies ()",
		"scope": "hoodiescript.lua"
	},
	"WorldChrMan.reloadCharacterFiles": {
		"prefix": "WorldChrMan.reloadCharacterFiles",
		"body": "WorldChrMan.reloadCharacterFiles(${1:characterId})",
		"description": "WorldChrMan.reloadCharacterFiles (characterId)",
		"scope": "hoodiescript.lua"
	},
	"WorldChrMan.findEntityTest": {
		"prefix": "WorldChrMan.findEntityTest",
		"body": "WorldChrMan.findEntityTest(${1:id})",
		"description": "WorldChrMan.findEntityTest (id)",
		"scope": "hoodiescript.lua"
	},
	"WorldChrMan.getInsByHandle": {
		"prefix": "WorldChrMan.getInsByHandle",
		"body": "WorldChrMan.getInsByHandle(${1:handle})",
		"description": "WorldChrMan.getInsByHandle (handle)",
		"scope": "hoodiescript.lua"
	},
	"WorldChrMan.getCamVector": {
		"prefix": "WorldChrMan.getCamVector",
		"body": "WorldChrMan.getCamVector()",
		"description": "WorldChrMan.getCamVector ()",
		"scope": "hoodiescript.lua"
	},
	"WorldChrMan.getInstance": {
		"prefix": "WorldChrMan.getInstance",
		"body": "WorldChrMan.getInstance()",
		"description": "WorldChrMan.getInstance ()",
		"scope": "hoodiescript.lua"
	},
	"WorldChrMan.hasInstance": {
		"prefix": "WorldChrMan.hasInstance",
		"body": "WorldChrMan.hasInstance()",
		"description": "WorldChrMan.hasInstance ()",
		"scope": "hoodiescript.lua"
	},
	"ChrIns.new0": {
		"prefix": "ChrIns.new",
		"body": "ChrIns.new(${1:ChrInsPtr})",
		"description": "ChrIns.new(ChrInsPtr)",
		"scope": "hoodiescript.lua"
	},
	"ChrIns.isValid": {
		"prefix": "ChrIns.isValid",
		"body": "ChrIns.isValid(${1:this})",
		"description": "bool ChrIns.isValid (this)",
		"scope": "hoodiescript.lua"
	},
	"ChrIns.getHandle": {
		"prefix": "ChrIns.getHandle",
		"body": "ChrIns.getHandle(${1:this})",
		"description": "Handle ChrIns.getHandle (this)",
		"scope": "hoodiescript.lua"
	},
	"ChrIns.getChrType": {
		"prefix": "ChrIns.getChrType",
		"body": "ChrIns.getChrType(${1:this})",
		"description": "ChrType ChrIns.getChrType (this)",
		"scope": "hoodiescript.lua"
	},
	"ChrIns.setChrType": {
		"prefix": "ChrIns.setChrType",
		"body": "ChrIns.setChrType(${1:this}, ${2:chrType})",
		"description": "void ChrIns.setChrType (this, chrType)",
		"scope": "hoodiescript.lua"
	},
	"ChrIns.getTeam": {
		"prefix": "ChrIns.getTeam",
		"body": "ChrIns.getTeam(${1:this})",
		"description": "Team ChrIns.getTeam (this)",
		"scope": "hoodiescript.lua"
	},
	"ChrIns.setTeam": {
		"prefix": "ChrIns.setTeam",
		"body": "ChrIns.setTeam(${1:this}, ${2:team})",
		"description": "void ChrIns.setTeam (this, team)",
		"scope": "hoodiescript.lua"
	},
	"ChrIns.getForwardId": {
		"prefix": "ChrIns.getForwardId",
		"body": "ChrIns.getForwardId(${1:this})",
		"description": "unsigned short ChrIns.getForwardId (this)",
		"scope": "hoodiescript.lua"
	},
	"ChrIns.getCharacterString": {
		"prefix": "ChrIns.getCharacterString",
		"body": "ChrIns.getCharacterString(${1:this})",
		"description": "std::wstring ChrIns.getCharacterString (this)",
		"scope": "hoodiescript.lua"
	},
	"ChrIns.getAnimationString": {
		"prefix": "ChrIns.getAnimationString",
		"body": "ChrIns.getAnimationString(${1:this})",
		"description": "std::wstring ChrIns.getAnimationString (this)",
		"scope": "hoodiescript.lua"
	},
	"ChrIns.getAnimationTime": {
		"prefix": "ChrIns.getAnimationTime",
		"body": "ChrIns.getAnimationTime(${1:this})",
		"description": "float ChrIns.getAnimationTime (this)",
		"scope": "hoodiescript.lua"
	},
	"ChrIns.getMaxAnimationTime": {
		"prefix": "ChrIns.getMaxAnimationTime",
		"body": "ChrIns.getMaxAnimationTime(${1:this})",
		"description": "float ChrIns.getMaxAnimationTime (this)",
		"scope": "hoodiescript.lua"
	},
	"ChrIns.getTurnRate": {
		"prefix": "ChrIns.getTurnRate",
		"body": "ChrIns.getTurnRate(${1:this})",
		"description": "float ChrIns.getTurnRate (this)",
		"scope": "hoodiescript.lua"
	},
	"ChrIns.getPosition": {
		"prefix": "ChrIns.getPosition",
		"body": "ChrIns.getPosition(${1:this})",
		"description": "std::vector<float> ChrIns.getPosition (this)",
		"scope": "hoodiescript.lua"
	},
	"ChrIns.setPosition": {
		"prefix": "ChrIns.setPosition",
		"body": "ChrIns.setPosition(${1:this}, ${2:position})",
		"description": "void ChrIns.setPosition (this, position)",
		"scope": "hoodiescript.lua"
	},
	"ChrIns.getAngle": {
		"prefix": "ChrIns.getAngle",
		"body": "ChrIns.getAngle(${1:this})",
		"description": "float ChrIns.getAngle (this)",
		"scope": "hoodiescript.lua"
	},
	"ChrIns.getCrossbowAngle": {
		"prefix": "ChrIns.getCrossbowAngle",
		"body": "ChrIns.getCrossbowAngle(${1:this})",
		"description": "float ChrIns.getCrossbowAngle (this)",
		"scope": "hoodiescript.lua"
	},
	"ChrIns.setAngle": {
		"prefix": "ChrIns.setAngle",
		"body": "ChrIns.setAngle(${1:this}, ${2:angle})",
		"description": "void ChrIns.setAngle (this, angle)",
		"scope": "hoodiescript.lua"
	},
	"ChrIns.getSprjChrDataModule": {
		"prefix": "ChrIns.getSprjChrDataModule",
		"body": "ChrIns.getSprjChrDataModule(${1:this})",
		"description": "uintptr_t ChrIns.getSprjChrDataModule (this)",
		"scope": "hoodiescript.lua"
	},
	"ChrIns.getSprjChrDamageModule": {
		"prefix": "ChrIns.getSprjChrDamageModule",
		"body": "ChrIns.getSprjChrDamageModule(${1:this})",
		"description": "uintptr_t ChrIns.getSprjChrDamageModule (this)",
		"scope": "hoodiescript.lua"
	},
	"ChrIns.isDead": {
		"prefix": "ChrIns.isDead",
		"body": "ChrIns.isDead(${1:this})",
		"description": "int32_t ChrIns.isDead (this)",
		"scope": "hoodiescript.lua"
	},
	"ChrIns.setIsDead": {
		"prefix": "ChrIns.setIsDead",
		"body": "ChrIns.setIsDead(${1:this}, ${2:isDead})",
		"description": "void ChrIns.setIsDead (this, isDead)",
		"scope": "hoodiescript.lua"
	},
	"ChrIns.isNoGravity": {
		"prefix": "ChrIns.isNoGravity",
		"body": "ChrIns.isNoGravity(${1:this})",
		"description": "bool ChrIns.isNoGravity (this)",
		"scope": "hoodiescript.lua"
	},
	"ChrIns.setNoGravity": {
		"prefix": "ChrIns.setNoGravity",
		"body": "ChrIns.setNoGravity(${1:this}, ${2:value})",
		"description": "void ChrIns.setNoGravity (this, value)",
		"scope": "hoodiescript.lua"
	},
	"ChrIns.isDodging": {
		"prefix": "ChrIns.isDodging",
		"body": "ChrIns.isDodging(${1:this})",
		"description": "bool ChrIns.isDodging (this)",
		"scope": "hoodiescript.lua"
	},
	"ChrIns.getHkbCharacter": {
		"prefix": "ChrIns.getHkbCharacter",
		"body": "ChrIns.getHkbCharacter(${1:this})",
		"description": "uintptr_t ChrIns.getHkbCharacter (this)",
		"scope": "hoodiescript.lua"
	},
	"ChrIns.hasHkbCharacter": {
		"prefix": "ChrIns.hasHkbCharacter",
		"body": "ChrIns.hasHkbCharacter(${1:this})",
		"description": "bool ChrIns.hasHkbCharacter (this)",
		"scope": "hoodiescript.lua"
	},
	"ChrIns.playAnimation": {
		"prefix": "ChrIns.playAnimation",
		"body": "ChrIns.playAnimation(${1:this}, ${2:animationStringId})",
		"description": "void ChrIns.playAnimation (this, animationStringId)",
		"scope": "hoodiescript.lua"
	},
	"ChrIns.playAnimationString": {
		"prefix": "ChrIns.playAnimationString",
		"body": "ChrIns.playAnimationString(${1:this}, ${2:animationString})",
		"description": "void ChrIns.playAnimationString (this, animationString)",
		"scope": "hoodiescript.lua"
	},
	"ChrIns.getHkbIdFromString": {
		"prefix": "ChrIns.getHkbIdFromString",
		"body": "ChrIns.getHkbIdFromString(${1:this}, ${2:animationString})",
		"description": "int32_t ChrIns.getHkbIdFromString (this, animationString)",
		"scope": "hoodiescript.lua"
	},
	"ChrIns.getHkbStringFromId": {
		"prefix": "ChrIns.getHkbStringFromId",
		"body": "ChrIns.getHkbStringFromId(${1:this}, ${2:id})",
		"description": "std::wstring ChrIns.getHkbStringFromId (this, id)",
		"scope": "hoodiescript.lua"
	},
	"ChrIns.getWeightIndex": {
		"prefix": "ChrIns.getWeightIndex",
		"body": "ChrIns.getWeightIndex(${1:this})",
		"description": "int32_t ChrIns.getWeightIndex (this)",
		"scope": "hoodiescript.lua"
	},
	"ChrIns.hasSpEffect": {
		"prefix": "ChrIns.hasSpEffect",
		"body": "ChrIns.hasSpEffect(${1:this}, ${2:spEffectId})",
		"description": "bool ChrIns.hasSpEffect (this, spEffectId)",
		"scope": "hoodiescript.lua"
	},
	"ChrIns.setWeightIndex": {
		"prefix": "ChrIns.setWeightIndex",
		"body": "ChrIns.setWeightIndex(${1:this}, ${2:weightIndex})",
		"description": "void ChrIns.setWeightIndex (this, weightIndex)",
		"scope": "hoodiescript.lua"
	},
	"ChrIns.setDebugAnimSpeed": {
		"prefix": "ChrIns.setDebugAnimSpeed",
		"body": "ChrIns.setDebugAnimSpeed(${1:this}, ${2:speedModifier})",
		"description": "void ChrIns.setDebugAnimSpeed (this, speedModifier)",
		"scope": "hoodiescript.lua"
	},
	"ChrIns.getDummyPolyPositions": {
		"prefix": "ChrIns.getDummyPolyPositions",
		"body": "ChrIns.getDummyPolyPositions(${1:this}, ${2:dummyPolyId}, ${3:uint32_t&})",
		"description": "std::vector<std::array<float, 4>> ChrIns.getDummyPolyPositions (this, dummyPolyId, uint32_t&)",
		"scope": "hoodiescript.lua"
	},
	"ChrIns.getAddress": {
		"prefix": "ChrIns.getAddress",
		"body": "ChrIns.getAddress(${1:this})",
		"description": "uintptr_t ChrIns.getAddress (this)",
		"scope": "hoodiescript.lua"
	},
	"ChrIns.isChrIns": {
		"prefix": "ChrIns.isChrIns",
		"body": "ChrIns.isChrIns(${1:address})",
		"description": "bool ChrIns.isChrIns (address)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.new0": {
		"prefix": "PlayerIns.new",
		"body": "PlayerIns.new(${1:address})",
		"description": " PlayerIns.new (address)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.getPlayerGameData": {
		"prefix": "PlayerIns.getPlayerGameData",
		"body": "PlayerIns.getPlayerGameData(${1:this})",
		"description": "PlayerGameData PlayerIns.getPlayerGameData (this)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.hasPlayerGameData": {
		"prefix": "PlayerIns.hasPlayerGameData",
		"body": "PlayerIns.hasPlayerGameData(${1:this})",
		"description": "bool PlayerIns.hasPlayerGameData (this)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.getNetworkPointer": {
		"prefix": "PlayerIns.getNetworkPointer",
		"body": "PlayerIns.getNetworkPointer(${1:this})",
		"description": "uintptr_t* PlayerIns.getNetworkPointer (this)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.getLeftHandWeapon": {
		"prefix": "PlayerIns.getLeftHandWeapon",
		"body": "PlayerIns.getLeftHandWeapon(${1:this}, ${2:slotNumber})",
		"description": "int32_t PlayerIns.getLeftHandWeapon (this, slotNumber)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.getLeftHandWeaponActive": {
		"prefix": "PlayerIns.getLeftHandWeaponActive",
		"body": "PlayerIns.getLeftHandWeaponActive(${1:this})",
		"description": "int32_t PlayerIns.getLeftHandWeaponActive (this)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.setLeftHandWeapon": {
		"prefix": "PlayerIns.setLeftHandWeapon",
		"body": "PlayerIns.setLeftHandWeapon(${1:this}, ${2:slotNumber}, ${3:int32_t&})",
		"description": "void PlayerIns.setLeftHandWeapon (this, slotNumber, int32_t&)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.setLeftHandWeaponActive": {
		"prefix": "PlayerIns.setLeftHandWeaponActive",
		"body": "PlayerIns.setLeftHandWeaponActive(${1:this}, ${2:equipParamWeaponId})",
		"description": "void PlayerIns.setLeftHandWeaponActive (this, equipParamWeaponId)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.getRightHandWeapon": {
		"prefix": "PlayerIns.getRightHandWeapon",
		"body": "PlayerIns.getRightHandWeapon(${1:this}, ${2:slotNumber})",
		"description": "int32_t PlayerIns.getRightHandWeapon (this, slotNumber)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.setWeaponSheathState": {
		"prefix": "PlayerIns.setWeaponSheathState",
		"body": "PlayerIns.setWeaponSheathState(${1:this}, ${2:slot})",
		"description": "void PlayerIns.setWeaponSheathState (this, slot)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.ReplaceWeapon": {
		"prefix": "PlayerIns.ReplaceWeapon",
		"body": "PlayerIns.ReplaceWeapon(${1:this}, ${2:equipParamWeaponTarget}, ${3:int32_t}, ${4:index})",
		"description": "void PlayerIns.ReplaceWeapon (this, equipParamWeaponTarget, int32_t, index)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.ReplaceWeaponActiveRight": {
		"prefix": "PlayerIns.ReplaceWeaponActiveRight",
		"body": "PlayerIns.ReplaceWeaponActiveRight(${1:this}, ${2:equipParamWeaponTarget}, ${3:int32_t})",
		"description": "void PlayerIns.ReplaceWeaponActiveRight (this, equipParamWeaponTarget, int32_t)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.getWeaponSheathState": {
		"prefix": "PlayerIns.getWeaponSheathState",
		"body": "PlayerIns.getWeaponSheathState(${1:this})",
		"description": "int32_t PlayerIns.getWeaponSheathState (this)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.getRightHandWeaponActive": {
		"prefix": "PlayerIns.getRightHandWeaponActive",
		"body": "PlayerIns.getRightHandWeaponActive(${1:this})",
		"description": "int32_t PlayerIns.getRightHandWeaponActive (this)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.setRightHandWeapon": {
		"prefix": "PlayerIns.setRightHandWeapon",
		"body": "PlayerIns.setRightHandWeapon(${1:this}, ${2:slotNumber}, ${3:int32_t&})",
		"description": "void PlayerIns.setRightHandWeapon (this, slotNumber, int32_t&)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.setRightHandWeaponActive": {
		"prefix": "PlayerIns.setRightHandWeaponActive",
		"body": "PlayerIns.setRightHandWeaponActive(${1:this}, ${2:equipParamWeaponId})",
		"description": "void PlayerIns.setRightHandWeaponActive (this, equipParamWeaponId)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.setRightHandWeaponActiveNetworked": {
		"prefix": "PlayerIns.setRightHandWeaponActiveNetworked",
		"body": "PlayerIns.setRightHandWeaponActiveNetworked(${1:this}, ${2:equipParamWeaponId})",
		"description": "void PlayerIns.setRightHandWeaponActiveNetworked (this, equipParamWeaponId)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.setRightHandWeaponNetworked": {
		"prefix": "PlayerIns.setRightHandWeaponNetworked",
		"body": "PlayerIns.setRightHandWeaponNetworked(${1:this}, ${2:equipParamWeaponId}, ${3:index})",
		"description": "void PlayerIns.setRightHandWeaponNetworked (this, equipParamWeaponId, index)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.removeWeaponFromInventory": {
		"prefix": "PlayerIns.removeWeaponFromInventory",
		"body": "PlayerIns.removeWeaponFromInventory(${1:this}, ${2:equipParamWeaponId})",
		"description": "bool PlayerIns.removeWeaponFromInventory (this, equipParamWeaponId)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.getHead": {
		"prefix": "PlayerIns.getHead",
		"body": "PlayerIns.getHead(${1:this})",
		"description": "int32_t PlayerIns.getHead (this)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.setHead": {
		"prefix": "PlayerIns.setHead",
		"body": "PlayerIns.setHead(${1:this}, ${2:equipParamProtectorId})",
		"description": "void PlayerIns.setHead (this, equipParamProtectorId)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.getChest": {
		"prefix": "PlayerIns.getChest",
		"body": "PlayerIns.getChest(${1:this})",
		"description": "int32_t PlayerIns.getChest (this)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.setChest": {
		"prefix": "PlayerIns.setChest",
		"body": "PlayerIns.setChest(${1:this}, ${2:equipParamProtectorId})",
		"description": "void PlayerIns.setChest (this, equipParamProtectorId)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.getHands": {
		"prefix": "PlayerIns.getHands",
		"body": "PlayerIns.getHands(${1:this})",
		"description": "int32_t PlayerIns.getHands (this)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.setHands": {
		"prefix": "PlayerIns.setHands",
		"body": "PlayerIns.setHands(${1:this}, ${2:equipParamProtectorId})",
		"description": "void PlayerIns.setHands (this, equipParamProtectorId)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.getLegs": {
		"prefix": "PlayerIns.getLegs",
		"body": "PlayerIns.getLegs(${1:this})",
		"description": "int32_t PlayerIns.getLegs (this)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.setLegs": {
		"prefix": "PlayerIns.setLegs",
		"body": "PlayerIns.setLegs(${1:this}, ${2:equipParamProtectorId})",
		"description": "void PlayerIns.setLegs (this, equipParamProtectorId)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.getRing": {
		"prefix": "PlayerIns.getRing",
		"body": "PlayerIns.getRing(${1:this}, ${2:slotNumber})",
		"description": "int32_t PlayerIns.getRing (this, slotNumber)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.setRing": {
		"prefix": "PlayerIns.setRing",
		"body": "PlayerIns.setRing(${1:this}, ${2:slotNumber}, ${3:int32_t&})",
		"description": "void PlayerIns.setRing (this, slotNumber, int32_t&)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.getAmmo": {
		"prefix": "PlayerIns.getAmmo",
		"body": "PlayerIns.getAmmo(${1:this}, ${2:slotNumber})",
		"description": "int32_t PlayerIns.getAmmo (this, slotNumber)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.setAmmo": {
		"prefix": "PlayerIns.setAmmo",
		"body": "PlayerIns.setAmmo(${1:this}, ${2:slotNumber}, ${3:int32_t&})",
		"description": "void PlayerIns.setAmmo (this, slotNumber, int32_t&)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.getCovenant": {
		"prefix": "PlayerIns.getCovenant",
		"body": "PlayerIns.getCovenant(${1:this})",
		"description": "int32_t PlayerIns.getCovenant (this)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.setCovenant": {
		"prefix": "PlayerIns.setCovenant",
		"body": "PlayerIns.setCovenant(${1:this}, ${2:equipParamAccessoryId})",
		"description": "void PlayerIns.setCovenant (this, equipParamAccessoryId)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.isNoGoodsConsume": {
		"prefix": "PlayerIns.isNoGoodsConsume",
		"body": "PlayerIns.isNoGoodsConsume(${1:this})",
		"description": "bool PlayerIns.isNoGoodsConsume (this)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.setNoGoodsConsume": {
		"prefix": "PlayerIns.setNoGoodsConsume",
		"body": "PlayerIns.setNoGoodsConsume(${1:this}, ${2:value})",
		"description": "void PlayerIns.setNoGoodsConsume (this, value)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.getPlayerCtrl": {
		"prefix": "PlayerIns.getPlayerCtrl",
		"body": "PlayerIns.getPlayerCtrl(${1:this})",
		"description": "uintptr_t PlayerIns.getPlayerCtrl (this)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.getNetworkHandle": {
		"prefix": "PlayerIns.getNetworkHandle",
		"body": "PlayerIns.getNetworkHandle(${1:this})",
		"description": "uintptr_t* PlayerIns.getNetworkHandle (this)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.getAddressByOffsetNumber": {
		"prefix": "PlayerIns.getAddressByOffsetNumber",
		"body": "PlayerIns.getAddressByOffsetNumber(${1:offsetNumber})",
		"description": "uintptr_t PlayerIns.getAddressByOffsetNumber (offsetNumber)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.isChrWithOffsetNumber": {
		"prefix": "PlayerIns.isChrWithOffsetNumber",
		"body": "PlayerIns.isChrWithOffsetNumber(${1:offsetNumber})",
		"description": "bool PlayerIns.isChrWithOffsetNumber (offsetNumber)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.isPlayer": {
		"prefix": "PlayerIns.isPlayer",
		"body": "PlayerIns.isPlayer(${1:address})",
		"description": "bool PlayerIns.isPlayer (address)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.getMainChrAddress": {
		"prefix": "PlayerIns.getMainChrAddress",
		"body": "PlayerIns.getMainChrAddress()",
		"description": "uintptr_t PlayerIns.getMainChrAddress ()",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.isMainChr": {
		"prefix": "PlayerIns.isMainChr",
		"body": "PlayerIns.isMainChr(${1:address})",
		"description": "bool PlayerIns.isMainChr (address)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.isMainChrLoaded": {
		"prefix": "PlayerIns.isMainChrLoaded",
		"body": "PlayerIns.isMainChrLoaded()",
		"description": "bool PlayerIns.isMainChrLoaded ()",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.isValid": {
		"prefix": "PlayerIns.isValid",
		"body": "PlayerIns.isValid(${1:this})",
		"description": "bool PlayerIns.isValid (this)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.getHandle": {
		"prefix": "PlayerIns.getHandle",
		"body": "PlayerIns.getHandle(${1:this})",
		"description": "Handle PlayerIns.getHandle (this)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.getChrType": {
		"prefix": "PlayerIns.getChrType",
		"body": "PlayerIns.getChrType(${1:this})",
		"description": "ChrType PlayerIns.getChrType (this)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.setChrType": {
		"prefix": "PlayerIns.setChrType",
		"body": "PlayerIns.setChrType(${1:this}, ${2:chrType})",
		"description": "void PlayerIns.setChrType (this, chrType)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.getTeam": {
		"prefix": "PlayerIns.getTeam",
		"body": "PlayerIns.getTeam(${1:this})",
		"description": "Team PlayerIns.getTeam (this)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.setTeam": {
		"prefix": "PlayerIns.setTeam",
		"body": "PlayerIns.setTeam(${1:this}, ${2:team})",
		"description": "void PlayerIns.setTeam (this, team)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.getForwardId": {
		"prefix": "PlayerIns.getForwardId",
		"body": "PlayerIns.getForwardId(${1:this})",
		"description": "unsigned short PlayerIns.getForwardId (this)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.getCharacterString": {
		"prefix": "PlayerIns.getCharacterString",
		"body": "PlayerIns.getCharacterString(${1:this})",
		"description": "std::wstring PlayerIns.getCharacterString (this)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.getAnimationString": {
		"prefix": "PlayerIns.getAnimationString",
		"body": "PlayerIns.getAnimationString(${1:this})",
		"description": "std::wstring PlayerIns.getAnimationString (this)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.getAnimationTime": {
		"prefix": "PlayerIns.getAnimationTime",
		"body": "PlayerIns.getAnimationTime(${1:this})",
		"description": "float PlayerIns.getAnimationTime (this)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.getMaxAnimationTime": {
		"prefix": "PlayerIns.getMaxAnimationTime",
		"body": "PlayerIns.getMaxAnimationTime(${1:this})",
		"description": "float PlayerIns.getMaxAnimationTime (this)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.getTurnRate": {
		"prefix": "PlayerIns.getTurnRate",
		"body": "PlayerIns.getTurnRate(${1:this})",
		"description": "float PlayerIns.getTurnRate (this)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.getPosition": {
		"prefix": "PlayerIns.getPosition",
		"body": "PlayerIns.getPosition(${1:this})",
		"description": "std::vector<float> PlayerIns.getPosition (this)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.setPosition": {
		"prefix": "PlayerIns.setPosition",
		"body": "PlayerIns.setPosition(${1:this}, ${2:position})",
		"description": "void PlayerIns.setPosition (this, position)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.getAngle": {
		"prefix": "PlayerIns.getAngle",
		"body": "PlayerIns.getAngle(${1:this})",
		"description": "float PlayerIns.getAngle (this)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.getCrossbowAngle": {
		"prefix": "PlayerIns.getCrossbowAngle",
		"body": "PlayerIns.getCrossbowAngle(${1:this})",
		"description": "float PlayerIns.getCrossbowAngle (this)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.setAngle": {
		"prefix": "PlayerIns.setAngle",
		"body": "PlayerIns.setAngle(${1:this}, ${2:angle})",
		"description": "void PlayerIns.setAngle (this, angle)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.getSprjChrDataModule": {
		"prefix": "PlayerIns.getSprjChrDataModule",
		"body": "PlayerIns.getSprjChrDataModule(${1:this})",
		"description": "uintptr_t PlayerIns.getSprjChrDataModule (this)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.getSprjChrDamageModule": {
		"prefix": "PlayerIns.getSprjChrDamageModule",
		"body": "PlayerIns.getSprjChrDamageModule(${1:this})",
		"description": "uintptr_t PlayerIns.getSprjChrDamageModule (this)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.isDead": {
		"prefix": "PlayerIns.isDead",
		"body": "PlayerIns.isDead(${1:this})",
		"description": "int32_t PlayerIns.isDead (this)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.setIsDead": {
		"prefix": "PlayerIns.setIsDead",
		"body": "PlayerIns.setIsDead(${1:this}, ${2:isDead})",
		"description": "void PlayerIns.setIsDead (this, isDead)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.isNoGravity": {
		"prefix": "PlayerIns.isNoGravity",
		"body": "PlayerIns.isNoGravity(${1:this})",
		"description": "bool PlayerIns.isNoGravity (this)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.setNoGravity": {
		"prefix": "PlayerIns.setNoGravity",
		"body": "PlayerIns.setNoGravity(${1:this}, ${2:value})",
		"description": "void PlayerIns.setNoGravity (this, value)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.isDodging": {
		"prefix": "PlayerIns.isDodging",
		"body": "PlayerIns.isDodging(${1:this})",
		"description": "bool PlayerIns.isDodging (this)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.getHkbCharacter": {
		"prefix": "PlayerIns.getHkbCharacter",
		"body": "PlayerIns.getHkbCharacter(${1:this})",
		"description": "uintptr_t PlayerIns.getHkbCharacter (this)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.hasHkbCharacter": {
		"prefix": "PlayerIns.hasHkbCharacter",
		"body": "PlayerIns.hasHkbCharacter(${1:this})",
		"description": "bool PlayerIns.hasHkbCharacter (this)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.playAnimation": {
		"prefix": "PlayerIns.playAnimation",
		"body": "PlayerIns.playAnimation(${1:this}, ${2:animationStringId})",
		"description": "void PlayerIns.playAnimation (this, animationStringId)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.playAnimationString": {
		"prefix": "PlayerIns.playAnimationString",
		"body": "PlayerIns.playAnimationString(${1:this}, ${2:animationString})",
		"description": "void PlayerIns.playAnimationString (this, animationString)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.getHkbIdFromString": {
		"prefix": "PlayerIns.getHkbIdFromString",
		"body": "PlayerIns.getHkbIdFromString(${1:this}, ${2:animationString})",
		"description": "int32_t PlayerIns.getHkbIdFromString (this, animationString)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.getHkbStringFromId": {
		"prefix": "PlayerIns.getHkbStringFromId",
		"body": "PlayerIns.getHkbStringFromId(${1:this}, ${2:id})",
		"description": "std::wstring PlayerIns.getHkbStringFromId (this, id)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.playDebugIdle": {
		"prefix": "PlayerIns.playDebugIdle",
		"body": "PlayerIns.playDebugIdle(${1:this}, ${2:animationId})",
		"description": "//void PlayerIns.playDebugIdle (this, animationId)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.getWeightIndex": {
		"prefix": "PlayerIns.getWeightIndex",
		"body": "PlayerIns.getWeightIndex(${1:this})",
		"description": "int32_t PlayerIns.getWeightIndex (this)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.hasSpEffect": {
		"prefix": "PlayerIns.hasSpEffect",
		"body": "PlayerIns.hasSpEffect(${1:this}, ${2:spEffectId})",
		"description": "bool PlayerIns.hasSpEffect (this, spEffectId)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.setWeightIndex": {
		"prefix": "PlayerIns.setWeightIndex",
		"body": "PlayerIns.setWeightIndex(${1:this}, ${2:weightIndex})",
		"description": "void PlayerIns.setWeightIndex (this, weightIndex)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.setDebugAnimSpeed": {
		"prefix": "PlayerIns.setDebugAnimSpeed",
		"body": "PlayerIns.setDebugAnimSpeed(${1:this}, ${2:speedModifier})",
		"description": "void PlayerIns.setDebugAnimSpeed (this, speedModifier)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.getDummyPolyPositions": {
		"prefix": "PlayerIns.getDummyPolyPositions",
		"body": "PlayerIns.getDummyPolyPositions(${1:this}, ${2:dummyPolyId}, ${3:uint32_t&})",
		"description": "std::vector<std::array<float, 4>> PlayerIns.getDummyPolyPositions (this, dummyPolyId, uint32_t&)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.getAddress": {
		"prefix": "PlayerIns.getAddress",
		"body": "PlayerIns.getAddress(${1:this})",
		"description": "uintptr_t PlayerIns.getAddress (this)",
		"scope": "hoodiescript.lua"
	},
	"PlayerIns.isChrIns": {
		"prefix": "PlayerIns.isChrIns",
		"body": "PlayerIns.isChrIns(${1:address})",
		"description": "bool PlayerIns.isChrIns (address)",
		"scope": "hoodiescript.lua"
	},
	"EquipInventoryData.new0": {
		"prefix": "EquipInventoryData.new",
		"body": "EquipInventoryData.new(${1:address})",
		"description": " EquipInventoryData.EquipInventoryData (address)",
		"scope": "hoodiescript.lua"
	},
	"EquipInventoryData.discardInventoryItems": {
		"prefix": "EquipInventoryData.discardInventoryItems",
		"body": "EquipInventoryData.discardInventoryItems(${1:this}, ${2:inventoryItemId}, ${3:quantity})",
		"description": "void EquipInventoryData.discardInventoryItems (this, inventoryItemId, quantity)",
		"scope": "hoodiescript.lua"
	},
	"EquipInventoryData.addItem": {
		"prefix": "EquipInventoryData.addItem",
		"body": "EquipInventoryData.addItem(${1:this}, ${2:paramIdPrefix}, ${3:paramId}, ${4:quantity}, ${5:durability})",
		"description": "void EquipInventoryData.addItem (this, paramIdPrefix, paramId, quantity, durability)",
		"scope": "hoodiescript.lua"
	},
	"EquipInventoryData.getInventoryItemById": {
		"prefix": "EquipInventoryData.getInventoryItemById",
		"body": "EquipInventoryData.getInventoryItemById(${1:this}, ${2:inventoryItemId})",
		"description": "InventoryItem* EquipInventoryData.getInventoryItemById (this, inventoryItemId)",
		"scope": "hoodiescript.lua"
	},
	"EquipInventoryData.getInventoryItemCount": {
		"prefix": "EquipInventoryData.getInventoryItemCount",
		"body": "EquipInventoryData.getInventoryItemCount(${1:this})",
		"description": "int32_t EquipInventoryData.getInventoryItemCount (this)",
		"scope": "hoodiescript.lua"
	},
	"EquipGameData.new0": {
		"prefix": "EquipGameData.new",
		"body": "EquipGameData.EquipGameData(${1:address})",
		"description": " EquipGameData.EquipGameData (address)",
		"scope": "hoodiescript.lua"
	},
	"EquipGameData.getInventoryItemIdBySlot": {
		"prefix": "EquipGameData.getInventoryItemIdBySlot",
		"body": "EquipGameData.getInventoryItemIdBySlot(${1:this}, ${2:EquipGameData})",
		"description": "int32_t EquipGameData.getInventoryItemIdBySlot (this, EquipGameData)",
		"scope": "hoodiescript.lua"
	},
	"EquipGameData.getInventoryItemIdByQuickSlot": {
		"prefix": "EquipGameData.getInventoryItemIdByQuickSlot",
		"body": "EquipGameData.getInventoryItemIdByQuickSlot(${1:this}, ${2:goodsSlot})",
		"description": "int32_t EquipGameData.getInventoryItemIdByQuickSlot (this, goodsSlot)",
		"scope": "hoodiescript.lua"
	},
	"EquipGameData.getInventoryItemIdByToolbeltSlot": {
		"prefix": "EquipGameData.getInventoryItemIdByToolbeltSlot",
		"body": "EquipGameData.getInventoryItemIdByToolbeltSlot(${1:this}, ${2:goodsSlot})",
		"description": "int32_t EquipGameData.getInventoryItemIdByToolbeltSlot (this, goodsSlot)",
		"scope": "hoodiescript.lua"
	},
	"EquipGameData.equipInventoryItem": {
		"prefix": "EquipGameData.equipInventoryItem",
		"body": "EquipGameData.equipInventoryItem(${1:this}, ${2:EquipGameData}, ${3:inventoryItemId})",
		"description": "void EquipGameData.equipInventoryItem (this, EquipGameData, inventoryItemId)",
		"scope": "hoodiescript.lua"
	},
	"EquipGameData.equipGoodsInventoryItem": {
		"prefix": "EquipGameData.equipGoodsInventoryItem",
		"body": "EquipGameData.equipGoodsInventoryItem(${1:this}, ${2:goodsSlot}, ${3:inventoryItemId})",
		"description": "void EquipGameData.equipGoodsInventoryItem (this, goodsSlot, inventoryItemId)",
		"scope": "hoodiescript.lua"
	},
	"EquipGameData.modifyInventoryItemQuantity": {
		"prefix": "EquipGameData.modifyInventoryItemQuantity",
		"body": "EquipGameData.modifyInventoryItemQuantity(${1:this}, ${2:inventoryItemId}, ${3:quantityDelta})",
		"description": "void EquipGameData.modifyInventoryItemQuantity (this, inventoryItemId, quantityDelta)",
		"scope": "hoodiescript.lua"
	},
	"EquipGameData.getEquipInventoryData": {
		"prefix": "EquipGameData.getEquipInventoryData",
		"body": "EquipGameData.getEquipInventoryData(${1:this})",
		"description": "uintptr_t EquipGameData.getEquipInventoryData (this)",
		"scope": "hoodiescript.lua"
	},
	"PlayerGameData.new0": {
		"prefix": "PlayerGameData.new",
		"body": "PlayerGameData.new(${1:address})",
		"description": " PlayerGameData.new (address)",
		"scope": "hoodiescript.lua"
	},
	"PlayerGameData.getPlayerNo": {
		"prefix": "PlayerGameData.getPlayerNo",
		"body": "PlayerGameData.getPlayerNo(${1:this})",
		"description": "int32_t PlayerGameData.getPlayerNo (this)",
		"scope": "hoodiescript.lua"
	},
	"PlayerGameData.getVoice": {
		"prefix": "PlayerGameData.getVoice",
		"body": "PlayerGameData.getVoice(${1:this})",
		"description": "Voice PlayerGameData.getVoice (this)",
		"scope": "hoodiescript.lua"
	},
	"PlayerGameData.setVoice": {
		"prefix": "PlayerGameData.setVoice",
		"body": "PlayerGameData.setVoice(${1:this}, ${2:voice})",
		"description": "void PlayerGameData.setVoice (this, voice)",
		"scope": "hoodiescript.lua"
	},
	"PlayerGameData.getClass": {
		"prefix": "PlayerGameData.getClass",
		"body": "PlayerGameData.getClass(${1:this})",
		"description": "Class PlayerGameData.getClass (this)",
		"scope": "hoodiescript.lua"
	},
	"PlayerGameData.setClass": {
		"prefix": "PlayerGameData.setClass",
		"body": "PlayerGameData.setClass(${1:this}, ${2:chrClass})",
		"description": "void PlayerGameData.setClass (this, chrClass)",
		"scope": "hoodiescript.lua"
	},
	"PlayerGameData.getGender": {
		"prefix": "PlayerGameData.getGender",
		"body": "PlayerGameData.getGender(${1:this})",
		"description": "Gender PlayerGameData.getGender (this)",
		"scope": "hoodiescript.lua"
	},
	"PlayerGameData.setGender": {
		"prefix": "PlayerGameData.setGender",
		"body": "PlayerGameData.setGender(${1:this}, ${2:gender})",
		"description": "void PlayerGameData.setGender (this, gender)",
		"scope": "hoodiescript.lua"
	},
	"PlayerGameData.getAge": {
		"prefix": "PlayerGameData.getAge",
		"body": "PlayerGameData.getAge(${1:this})",
		"description": "Age PlayerGameData.getAge (this)",
		"scope": "hoodiescript.lua"
	},
	"PlayerGameData.setAge": {
		"prefix": "PlayerGameData.setAge",
		"body": "PlayerGameData.setAge(${1:this}, ${2:age})",
		"description": "void PlayerGameData.setAge (this, age)",
		"scope": "hoodiescript.lua"
	},
	"PlayerGameData.getFaceData": {
		"prefix": "PlayerGameData.getFaceData",
		"body": "PlayerGameData.getFaceData(${1:this})",
		"description": "std::array<uint8_t, 256> PlayerGameData.getFaceData (this)",
		"scope": "hoodiescript.lua"
	},
	"PlayerGameData.getBodyProportions": {
		"prefix": "PlayerGameData.getBodyProportions",
		"body": "PlayerGameData.getBodyProportions(${1:this})",
		"description": "BodyProportions PlayerGameData.getBodyProportions (this)",
		"scope": "hoodiescript.lua"
	},
	"PlayerGameData.setBodyPreportions": {
		"prefix": "PlayerGameData.setBodyPreportions",
		"body": "PlayerGameData.setBodyPreportions(${1:this}, ${2:bodyPreportions})",
		"description": "void PlayerGameData.setBodyPreportions (this, bodyPreportions)",
		"scope": "hoodiescript.lua"
	},
	"PlayerGameData.getAttributes": {
		"prefix": "PlayerGameData.getAttributes",
		"body": "PlayerGameData.getAttributes(${1:this})",
		"description": "Attributes PlayerGameData.getAttributes (this)",
		"scope": "hoodiescript.lua"
	},
	"PlayerGameData.setAttributes": {
		"prefix": "PlayerGameData.setAttributes",
		"body": "PlayerGameData.setAttributes(${1:this}, ${2:attributes})",
		"description": "void PlayerGameData.setAttributes (this, attributes)",
		"scope": "hoodiescript.lua"
	},
	"PlayerGameData.getName": {
		"prefix": "PlayerGameData.getName",
		"body": "PlayerGameData.getName(${1:this})",
		"description": "std::wstring PlayerGameData.getName (this)",
		"scope": "hoodiescript.lua"
	},
	"PlayerGameData.setName": {
		"prefix": "PlayerGameData.setName",
		"body": "PlayerGameData.setName(${1:this}, ${2:name})",
		"description": "void PlayerGameData.setName (this, name)",
		"scope": "hoodiescript.lua"
	},
	"PlayerGameData.getCovenant": {
		"prefix": "PlayerGameData.getCovenant",
		"body": "PlayerGameData.getCovenant(${1:this})",
		"description": "Covenant PlayerGameData.getCovenant (this)",
		"scope": "hoodiescript.lua"
	},
	"PlayerGameData.setCovenant": {
		"prefix": "PlayerGameData.setCovenant",
		"body": "PlayerGameData.setCovenant(${1:this}, ${2:covenant})",
		"description": "void PlayerGameData.setCovenant (this, covenant)",
		"scope": "hoodiescript.lua"
	},
	"PlayerGameData.getInvadeType": {
		"prefix": "PlayerGameData.getInvadeType",
		"body": "PlayerGameData.getInvadeType(${1:this})",
		"description": "InvadeType PlayerGameData.getInvadeType (this)",
		"scope": "hoodiescript.lua"
	},
	"PlayerGameData.setInvadeType": {
		"prefix": "PlayerGameData.setInvadeType",
		"body": "PlayerGameData.setInvadeType(${1:this}, ${2:invadeType})",
		"description": "void PlayerGameData.setInvadeType (this, invadeType)",
		"scope": "hoodiescript.lua"
	},
	"PlayerGameData.getSpell": {
		"prefix": "PlayerGameData.getSpell",
		"body": "PlayerGameData.getSpell(${1:this}, ${2:slotNumber})",
		"description": "int32_t PlayerGameData.getSpell (this, slotNumber)",
		"scope": "hoodiescript.lua"
	},
	"PlayerGameData.setSpell": {
		"prefix": "PlayerGameData.setSpell",
		"body": "PlayerGameData.setSpell(${1:this}, ${2:slotNumber}, ${3:int32_t&})",
		"description": "void PlayerGameData.setSpell (this, slotNumber, int32_t&)",
		"scope": "hoodiescript.lua"
	},
	"PlayerGameData.getGesture": {
		"prefix": "PlayerGameData.getGesture",
		"body": "PlayerGameData.getGesture(${1:this}, ${2:slotNumber})",
		"description": "uint8_t PlayerGameData.getGesture (this, slotNumber)",
		"scope": "hoodiescript.lua"
	},
	"PlayerGameData.setGesture": {
		"prefix": "PlayerGameData.setGesture",
		"body": "PlayerGameData.setGesture(${1:this}, ${2:slotNumber}, ${3:uint8_t&})",
		"description": "void PlayerGameData.setGesture (this, slotNumber, uint8_t&)",
		"scope": "hoodiescript.lua"
	},
	"PlayerGameData.getEquipGameData": {
		"prefix": "PlayerGameData.getEquipGameData",
		"body": "PlayerGameData.getEquipGameData(${1:this})",
		"description": "uintptr_t PlayerGameData.getEquipGameData (this)",
		"scope": "hoodiescript.lua"
	},
	"PlayerGameData.getWeaponSheathData": {
		"prefix": "PlayerGameData.getWeaponSheathData",
		"body": "PlayerGameData.getWeaponSheathData(${1:this})",
		"description": "uint16_t PlayerGameData.getWeaponSheathData (this)",
		"scope": "hoodiescript.lua"
	},
	"PlayerGameData.getRightHandSlot": {
		"prefix": "PlayerGameData.getRightHandSlot",
		"body": "PlayerGameData.getRightHandSlot(${1:this})",
		"description": "int32_t PlayerGameData.getRightHandSlot (this)",
		"scope": "hoodiescript.lua"
	},
	"PlayerGameData.setRightHandSlot": {
		"prefix": "PlayerGameData.setRightHandSlot",
		"body": "PlayerGameData.setRightHandSlot(${1:this}, ${2:slot})",
		"description": "void PlayerGameData.setRightHandSlot (this, slot)",
		"scope": "hoodiescript.lua"
	},
	"PlayerGameData.getLeftHandSlot": {
		"prefix": "PlayerGameData.getLeftHandSlot",
		"body": "PlayerGameData.getLeftHandSlot(${1:this})",
		"description": "int32_t PlayerGameData.getLeftHandSlot (this)",
		"scope": "hoodiescript.lua"
	},
	"PlayerGameData.setLeftHandSlot": {
		"prefix": "PlayerGameData.setLeftHandSlot",
		"body": "PlayerGameData.setLeftHandSlot(${1:this}, ${2:slot})",
		"description": "void PlayerGameData.setLeftHandSlot (this, slot)",
		"scope": "hoodiescript.lua"
	},
	"PlayerGameData.getWeaponSheathState": {
		"prefix": "PlayerGameData.getWeaponSheathState",
		"body": "PlayerGameData.getWeaponSheathState(${1:this})",
		"description": "int32_t PlayerGameData.getWeaponSheathState (this)",
		"scope": "hoodiescript.lua"
	},
	"PlayerGameData.setWeaponSheathState": {
		"prefix": "PlayerGameData.setWeaponSheathState",
		"body": "PlayerGameData.setWeaponSheathState(${1:this}, ${2:state})",
		"description": "void PlayerGameData.setWeaponSheathState (this, state)",
		"scope": "hoodiescript.lua"
	},
	"PlayerGameData.getAddress": {
		"prefix": "PlayerGameData.getAddress",
		"body": "PlayerGameData.getAddress(${1:this})",
		"description": "void PlayerGameData.getAddress (this)",
		"scope": "hoodiescript.lua"
	},
	"ItemType.Weapon": {
		"prefix": "ItemType.Weapon",
		"body": "ItemType.Weapon",
		"description": "ItemType Enum - ",
		"scope": "hoodiescript.lua"
	},
	"ItemType.Protector": {
		"prefix": "ItemType.Protector",
		"body": "ItemType.Protector",
		"description": "ItemType Enum - ",
		"scope": "hoodiescript.lua"
	},
	"ItemType.Accessory": {
		"prefix": "ItemType.Accessory",
		"body": "ItemType.Accessory",
		"description": "ItemType Enum - ",
		"scope": "hoodiescript.lua"
	},
	"ItemType.Goods": {
		"prefix": "ItemType.Goods",
		"body": "ItemType.Goods",
		"description": "ItemType Enum - ",
		"scope": "hoodiescript.lua"
	},
	"Memory.GetPtrLua": {
		"prefix": "Memory.GetPtrLua",
		"body": "Memory.GetPtrLua(${1:base}, ${2:vargs})",
		"description": "uintptr_t Memory.GetPtrLua (base, vargs)",
		"scope": "hoodiescript.lua"
	},
	"Memory.DereferencePointer": {
		"prefix": "Memory.DereferencePointer",
		"body": "Memory.DereferencePointer(${1:address})",
		"description": "uintptr_t Memory.DereferencePointer (address)",
		"scope": "hoodiescript.lua"
	},
	"Memory.MultiLevelPointer": {
		"prefix": "Memory.MultiLevelPointer",
		"body": "Memory.MultiLevelPointer(${1:address})",
		"description": "bool Memory.MultiLevelPointer (address)",
		"scope": "hoodiescript.lua"
	},
	"Memory.ReadInt8": {
		"prefix": "Memory.ReadInt8",
		"body": "Memory.ReadInt8(${1:address})",
		"description": "int8_t Memory.ReadInt8 (address)",
		"scope": "hoodiescript.lua"
	},
	"Memory.ReadInt16": {
		"prefix": "Memory.ReadInt16",
		"body": "Memory.ReadInt16(${1:address})",
		"description": "int16_t Memory.ReadInt16 (address)",
		"scope": "hoodiescript.lua"
	},
	"Memory.ReadInt32": {
		"prefix": "Memory.ReadInt32",
		"body": "Memory.ReadInt32(${1:address})",
		"description": "int32_t Memory.ReadInt32 (address)",
		"scope": "hoodiescript.lua"
	},
	"Memory.ReadInt64": {
		"prefix": "Memory.ReadInt64",
		"body": "Memory.ReadInt64(${1:address})",
		"description": "int64_t Memory.ReadInt64 (address)",
		"scope": "hoodiescript.lua"
	},
	"Memory.ReadUint8": {
		"prefix": "Memory.ReadUint8",
		"body": "Memory.ReadUint8(${1:address})",
		"description": "uint8_t Memory.ReadUint8 (address)",
		"scope": "hoodiescript.lua"
	},
	"Memory.ReadUint16": {
		"prefix": "Memory.ReadUint16",
		"body": "Memory.ReadUint16(${1:address})",
		"description": "uint16_t Memory.ReadUint16 (address)",
		"scope": "hoodiescript.lua"
	},
	"Memory.ReadUint32": {
		"prefix": "Memory.ReadUint32",
		"body": "Memory.ReadUint32(${1:address})",
		"description": "uint32_t Memory.ReadUint32 (address)",
		"scope": "hoodiescript.lua"
	},
	"Memory.ReadUint64": {
		"prefix": "Memory.ReadUint64",
		"body": "Memory.ReadUint64(${1:address})",
		"description": "uint64_t Memory.ReadUint64 (address)",
		"scope": "hoodiescript.lua"
	},
	"Memory.ReadFloat": {
		"prefix": "Memory.ReadFloat",
		"body": "Memory.ReadFloat(${1:address})",
		"description": "float Memory.ReadFloat (address)",
		"scope": "hoodiescript.lua"
	},
	"Memory.ReadDouble": {
		"prefix": "Memory.ReadDouble",
		"body": "Memory.ReadDouble(${1:address})",
		"description": "double Memory.ReadDouble (address)",
		"scope": "hoodiescript.lua"
	},
	"Memory.ReadString": {
		"prefix": "Memory.ReadString",
		"body": "Memory.ReadString(${1:address})",
		"description": "std::string Memory.ReadString (address)",
		"scope": "hoodiescript.lua"
	},
	"Memory.WriteInt8": {
		"prefix": "Memory.WriteInt8",
		"body": "Memory.WriteInt8(${1:address}, ${2:newValue})",
		"description": "void Memory.WriteInt8 (address, newValue)",
		"scope": "hoodiescript.lua"
	},
	"Memory.WriteInt16": {
		"prefix": "Memory.WriteInt16",
		"body": "Memory.WriteInt16(${1:address}, ${2:newValue})",
		"description": "void Memory.WriteInt16 (address, newValue)",
		"scope": "hoodiescript.lua"
	},
	"Memory.WriteInt32": {
		"prefix": "Memory.WriteInt32",
		"body": "Memory.WriteInt32(${1:address}, ${2:newValue})",
		"description": "void Memory.WriteInt32 (address, newValue)",
		"scope": "hoodiescript.lua"
	},
	"Memory.WriteInt64": {
		"prefix": "Memory.WriteInt64",
		"body": "Memory.WriteInt64(${1:address}, ${2:newValue})",
		"description": "void Memory.WriteInt64 (address, newValue)",
		"scope": "hoodiescript.lua"
	},
	"Memory.WriteUint8": {
		"prefix": "Memory.WriteUint8",
		"body": "Memory.WriteUint8(${1:address}, ${2:newValue})",
		"description": "void Memory.WriteUint8 (address, newValue)",
		"scope": "hoodiescript.lua"
	},
	"Memory.WriteUint16": {
		"prefix": "Memory.WriteUint16",
		"body": "Memory.WriteUint16(${1:address}, ${2:newValue})",
		"description": "void Memory.WriteUint16 (address, newValue)",
		"scope": "hoodiescript.lua"
	},
	"Memory.WriteUint32": {
		"prefix": "Memory.WriteUint32",
		"body": "Memory.WriteUint32(${1:address}, ${2:newValue})",
		"description": "void Memory.WriteUint32 (address, newValue)",
		"scope": "hoodiescript.lua"
	},
	"Memory.WriteUint64": {
		"prefix": "Memory.WriteUint64",
		"body": "Memory.WriteUint64(${1:address}, ${2:newValue})",
		"description": "void Memory.WriteUint64 (address, newValue)",
		"scope": "hoodiescript.lua"
	},
	"Memory.WriteFloat": {
		"prefix": "Memory.WriteFloat",
		"body": "Memory.WriteFloat(${1:address}, ${2:newValue})",
		"description": "void Memory.WriteFloat (address, newValue)",
		"scope": "hoodiescript.lua"
	},
	"Memory.WriteDouble": {
		"prefix": "Memory.WriteDouble",
		"body": "Memory.WriteDouble(${1:address}, ${2:newValue})",
		"description": "void Memory.WriteDouble (address, newValue)",
		"scope": "hoodiescript.lua"
	},
	"Memory.WriteString": {
		"prefix": "Memory.WriteString",
		"body": "Memory.WriteString(${1:address}, ${2:newValue})",
		"description": "void Memory.WriteString (address, newValue)",
		"scope": "hoodiescript.lua"
	},
	"GiveMeTits": {
		"prefix": "Tits",
		"body": "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠛⠛⠋⠉⠙⠻⠿⠿⠿⠿⢿⣿⣿⣿⣿⣿⣿\n⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠃⠄⠄⠄⠄⠄⠄⠄⠄⠹⣿⣿⣶⣶⣦⣬⢹⣿⣿\n⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠃⠄⠄⠄⣰⣧⡀⠄⠄⠄⠄⠈⢙⡋⣿⣿⣿⢸⣿⣿\n⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠄⠄⠰⠼⢯⣿⣿⣦⣄⠄⠄⠄⠈⢡⣿⣿⣿⢸⣿⣿\n⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠄⠄⠸⠤⠕⠛⠙⠷⣿⡆⠄⠄⠄⣸⣿⣿⡏⣼⣿⣿\n⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⣴⣿⣿⣿⢡⣿⣿⣿\n⣿⣿⣿⣿⣿⣿⣿⣿⡟⠄⠄⠄⠄⠄⣄⠄⢀⠄⠄⢀⣤⣾⣿⣿⣿⢃⣾⣿⣿⣿\n⣿⣿⣿⣿⣿⣿⠿⣛⣡⣄⣀⠄⠠⢴⣿⣿⡿⣄⣴⣿⣿⣿⣿⣿⢃⣾⣿⣿⣿⣿\n⣿⣿⣿⣿⣿⡏⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣩⡽⡁⢸⣿⣿⣿⣿⣿\n⣿⣿⣿⣿⣿⢃⣿⣿⢟⣿⣿⣿⣿⣿⣮⢫⣿⣿⣿⣿⣿⣟⢿⠃⠄⢻⣿⣿⣿⣿\n⣿⣿⣿⣿⡿⣸⠟⣵⣿⣿⣿⣿⣿⣿⣿⣾⣿⣿⣿⣿⣿⣿⣷⣄⢰⡄⢿⣿⣿⣿\n⣿⣿⣿⣿⡇⠏⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⠹⡎⣿⣿⣿\n⣭⣍⠛⠿⠄⢰⠋⡉⠹⣿⣿⣿⣿⣿⣿⠙⣿⣿⣿⣿⣿⣿⡟⢁⠙⡆⢡⣿⣿⣿\n⠻⣿⡆⠄⣤⠈⢣⣈⣠⣿⣿⣿⣿⣿⠏⣄⠻⣿⣿⣿⣿⣿⣆⣈⣴⠃⣿⣿⣿⣿\n⡀⠈⢿⠄⣿⡇⠄⠙⠿⣿⡿⠿⢋⣥⣾⣿⣷⣌⠻⢿⣿⣿⡿⠟⣡⣾⣿⣿⠿⢋\n⠛⠳⠄⢠⣿⠇⠄⣷⡑⢶⣶⢿⣿⣿⣿⣽⣿⣿⣿⣶⣶⡐⣶⣿⠿⠛⣩⡄⠄⢸",
		"description": "ChainFailure is responsible for this",
		"scope": "tits.tits"
	}
}